service: serverless-github-codepipeline

define provider, runtime, and
provider:
  name: aws
  runtime: nodejs6.10 # AWS lambda supports v.4.3.2 and v.6.10.3
  memorySize: 512 # overwrite default memory of 1024; makes lambda free tier last longer.
  versionFunctions: false # don't create a new function version with each deploy

# overwrite defaults
#  stage: dev
  region: us-west-2 # override default region us-east-1

# service-wide environment variables
  environment:
    ENV: ${opt:env}

# Add statements to the Lambda function's IAM Role
 iamRoleStatements:
  - Effect: "Allow"
    Action:
      dynamodb:DescribeTable
      dynamodb:Scan
      dynamodb:Query
      dynamodb:GetItem
      dynamodb:PutItem
      dynamodb:UpdateItem
      dynamodb:DeleteItem
    Resource: 'arn:aws:dynamodb:us-west-2:*:*'

  #  - Effect: "Allow"
  #    Action:
  #      - "s3:ListBucket"
  #    Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #  - Effect: "Allow"
  #    Action:
  #      - "s3:PutObject"
  #    Resource:
  #      Fn::Join:
  #        - ""
  #        - - "arn:aws:s3:::"
  #          - "Ref" : "ServerlessDeploymentBucket"
  #          - "/*"


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
